Android复习项目
1.Git的使用
  git clone github远程仓库地址  : 将远程仓库clone到本地
  git add -A                   : 将修改的内容全部添加到暂存区
  git push origin master       : 将提交到主分支的文件添加到远程库

  git add 文件名.扩展名 : 将文件添加到暂存区（在.git文件夹下）
  git commit -m "提示" : 将暂存区的文件提交到当前分支
  git push origin master : 将本地仓库主分支的文件添加到远程仓库的主分支上
  git status : 仓库当前状态
  git diff 文件名: 查看不同，查看当前文件的修改
  git log : 查看历史提交记录
  git log --pretty=oneline : 简化查看历史提交记录
  git reset -hard HEAD^ : 回退版本（HEAD 当前版本 ; HEAD^ 上一版本 ; HEAD^^ 上上一个版本）
  git reset -hard 版本号 ：回到指定版本（版本号为由SHA1计算出来的16进制数）
  git reflog : 查看历史命令记录

  本地的一个文件夹（项目所在文件夹）为一个工作区，工作区中的.git文件夹为一个版本库
  git版本库中包含:暂存区（stage）, git自动创建的第一个分支master , 指向master的指针HEAD

  git checkout -- 文件名.扩展名 : 把该文件在工作区的修改全部撤销

  git rm 文件名.扩展名 : 删除文件
  注意:提交到版本库的文件永远不会担心被误删。已提交到版本库，若发现删错了，则可以用git checkout -- 文件名.扩展名进行文件恢复。
       此时文件恢复原理是:将版本库中的文件替换工作区中的文件

  git checkout -b dev : 创建并切换到新的分支dev,相当于git branch dev 和  git checkout dev (创建并切换到dev分支)
  git checkout 分支名 : 切换分支
  git branch : 查看当前分支
  git merge dev : 将dev分支合并到master分支（先切换当前分支为master分支，然后在执行此命令）
  git branch -d dev : 删除dev分支

  当在dev分支开发时，突然要解决一个bug,则想新建一个bug分支，但是当前的dev分支上的工作还没结束，还不能提交，此时就可以:
  git stash : 保存当前工作现场
  bug解决后再切回到dev分支后，需要恢复现场
  git stash list : 保存的工作现场列表
  git stash apply : 恢复现场方式一，恢复后stash不会被删除，需要手动命令删除
  git stash drop  : 删除stash
  git stash poop : 恢复现场方式二，恢复后stash也会被删除
  git stash apply 由git stash list 命令查看得到的stash的id(如:stash@{0})